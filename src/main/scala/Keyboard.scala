import java.awt._
import java.awt.event.KeyEvent._

class Keyboard(var robot: Robot) {

  def `type`(characters: String):Unit = characters.foreach(character => `type`(character))

  def `type`(character: Char):Unit= {
    character match {
      case 'a' => doType(VK_A)
      case 'b' => doType(VK_B)
      case 'c' => doType(VK_C)
      case 'd' => doType(VK_D)
      case 'e' => doType(VK_E)
      case 'f' => doType(VK_F)
      case 'g' => doType(VK_G)
      case 'h' => doType(VK_H)
      case 'i' => doType(VK_I)
      case 'j' => doType(VK_J)
      case 'k' => doType(VK_K)
      case 'l' => doType(VK_L)
      case 'm' => doType(VK_M)
      case 'n' => doType(VK_N)
      case 'o' => doType(VK_O)
      case 'p' => doType(VK_P)
      case 'q' => doType(VK_Q)
      case 'r' => doType(VK_R)
      case 's' => doType(VK_S)
      case 't' => doType(VK_T)
      case 'u' => doType(VK_U)
      case 'v' => doType(VK_V)
      case 'w' => doType(VK_W)
      case 'x' => doType(VK_X)
      case 'y' => doType(VK_Y)
      case 'z' => doType(VK_Z)
      case 'A' => doType(VK_SHIFT, VK_A)
      case 'B' => doType(VK_SHIFT, VK_B)
      case 'C' => doType(VK_SHIFT, VK_C)
      case 'D' => doType(VK_SHIFT, VK_D)
      case 'E' => doType(VK_SHIFT, VK_E)
      case 'F' => doType(VK_SHIFT, VK_F)
      case 'G' => doType(VK_SHIFT, VK_G)
      case 'H' => doType(VK_SHIFT, VK_H)
      case 'I' => doType(VK_SHIFT, VK_I)
      case 'J' => doType(VK_SHIFT, VK_J)
      case 'K' => doType(VK_SHIFT, VK_K)
      case 'L' => doType(VK_SHIFT, VK_L)
      case 'M' => doType(VK_SHIFT, VK_M)
      case 'N' => doType(VK_SHIFT, VK_N)
      case 'O' => doType(VK_SHIFT, VK_O)
      case 'P' => doType(VK_SHIFT, VK_P)
      case 'Q' => doType(VK_SHIFT, VK_Q)
      case 'R' => doType(VK_SHIFT, VK_R)
      case 'S' => doType(VK_SHIFT, VK_S)
      case 'T' => doType(VK_SHIFT, VK_T)
      case 'U' => doType(VK_SHIFT, VK_U)
      case 'V' => doType(VK_SHIFT, VK_V)
      case 'W' => doType(VK_SHIFT, VK_W)
      case 'X' => doType(VK_SHIFT, VK_X)
      case 'Y' => doType(VK_SHIFT, VK_Y)
      case 'Z' => doType(VK_SHIFT, VK_Z)
      case '`' => doType(VK_BACK_QUOTE)
      case '0' => doType(VK_0)
      case '1' => doType(VK_1)
      case '2' => doType(VK_2)
      case '3' => doType(VK_3)
      case '4' => doType(VK_4)
      case '5' => doType(VK_5)
      case '6' => doType(VK_6)
      case '7' => doType(VK_7)
      case '8' => doType(VK_8)
      case '9' => doType(VK_9)
      case '-' => doType(VK_MINUS)
      case '=' => doType(VK_EQUALS)
      case '~' => doType(VK_SHIFT, VK_BACK_QUOTE)
      case '!' => doType(VK_EXCLAMATION_MARK)
      case '@' => doType(VK_AT)
      case '#' => doType(VK_NUMBER_SIGN)
      case '$' => doType(VK_DOLLAR)
      case '%' => doType(VK_SHIFT, VK_5)
      case '^' => doType(VK_CIRCUMFLEX)
      case '&' => doType(VK_AMPERSAND)
      case '*' => doType(VK_ASTERISK)
      case '(' => doType(VK_LEFT_PARENTHESIS)
      case ')' => doType(VK_RIGHT_PARENTHESIS)
      case '_' => doType(VK_UNDERSCORE)
      case '+' => doType(VK_PLUS)
      case '\t' => doType(VK_TAB)
      case '\n' => doType(VK_ENTER)
      case '[' => doType(VK_OPEN_BRACKET)
      case ']' => doType(VK_CLOSE_BRACKET)
      case '\\' => doType(VK_BACK_SLASH)
      case '{' => doType(VK_SHIFT, VK_OPEN_BRACKET)
      case '}' => doType(VK_SHIFT, VK_CLOSE_BRACKET)
      case '|' => doType(VK_SHIFT, VK_BACK_SLASH)
      case ';' => doType(VK_SEMICOLON)
      case ':' => doType(VK_COLON)
      case '\'' => doType(VK_QUOTE)
      case '"' => doType(VK_QUOTEDBL)
      case ',' => doType(VK_COMMA)
      case '<' => doType(VK_LESS)
      case '.' => doType(VK_PERIOD)
      case '>' => doType(VK_GREATER)
      case '/' => doType(VK_SLASH)
      case '?' => doType(VK_SHIFT, VK_SLASH)
      case ' ' => doType(VK_SPACE)
      case _ => Unit//throw new IllegalArgumentException("Cannot type character " + character)
    }
  }

  private def doType(keyCodes: Int*) {
    doType(keyCodes, 0, keyCodes.length)
  }

  private def doType(keyCodes: Seq[Int], offset: Int, length: Int) {
    if (length == 0) {
      return
    }
    robot.keyPress(keyCodes(offset))
    doType(keyCodes, offset + 1, length - 1)
    robot.keyRelease(keyCodes(offset))
  }
}